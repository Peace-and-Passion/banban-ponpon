* Create your Git branch from master branch

  git checkout -b master origin/master
  git checkout -b your_name master
  git push origin your_name

# Build and run

** Building and running locally on Chrome

   cd Extension
   npm install
   npm run dev

- When you edit and save a file, Vite compiles it automatically and reload with Hot Module
  Replacement (HMR).
- You will need to repeat editing and saving twice to reflect your modification.
- You will need to abort "npm run dev" and rerun when modify locale files.

** Locally run on Chrome for deployed hm-server but not production build

   npm run prod

** Load Ponpon as Chrome extension

- open chrome://extensions
-  Press 「パッケージ化されていない拡張機能を読み込む」, and specify Extension/dist
-  Press "Service Worker" to open devtools for the background script.
- Set extension ID in conf.py of hm-server.

*** Browser variations

   npm run dev:firefox
   npm run dev:safari
   npm run prod:firefox
   npm run prod:safari
   npm run build:firefox
   npm run build:safari

*** Firefox

- npm run dev:firefox
- Open Firefox's [debugging page](about:debugging#/runtime/this-firefox) (`about:debugging#/runtime/this-firefox`)
- Click "Load Temporary Add-on..."
- Set extension ID in conf.py of hm-server.

*** Safari

- npm run dev:safari
- Open ../Safari/REPLACEME.xcodeproj in xcode.
- Build a target.
- Set extension ID in conf.py of hm-server.

** Open blank.html in Chrome

  file:///Users/your_name/dev/banban-ponpon/Extension/blank.html

- Ponpon recognizes the file and shows the buttons without pressing the start button.

** Build for deployment on Chome

   npm run build

* Development

** Communication using [[https://serversideup.net/open-source/webext-bridge/][webext-bridge]], and defining protocol

- [[https://serversideup.net/open-source/webext-bridge/][webext-bridge]] allow us to send and receive messages much easier than browser.runtime.sendMessage() and browser.tabs.sendMessage().

- [[https://serversideup.net/browser-extension-messaging/][Tutorial]]

- Define protocol used for communication between the content script and the background script in src/shim.d.ts.

  See https://serversideup.net/open-source/webext-bridge/docs/guide/type-safe-protocols

** Constants

- Import conf.ts

  import * as conf from '../conf';

- Use constants

  fetch(conf.apiURL + '/v1/my_api')

** UI components in src/resources

- See each file in src/resources for usage.

  import Button from '../resources/button.svelte';

  <Button id="ponpon-done-button" label="Done" on:click={cancelSelectionMode}>
  </Button>

  <Button on:click={login} valiant="flat">
  Sign in
  </Button>

** Internationalization (i18n)

- [[https://github.com/kaisermann/svelte-i18n/tree/main/docs][Svelte-i18n]] was installed and initialized.

- Usage. See  [[https://github.com/kaisermann/svelte-i18n/tree/main/docs][Svelte-i18n]] for detail.

    <h3>{$_('title')}</h3>

- To add a new language, Spanish for example.
  - Create locales/es.json
  - Add loader to main.svelte
     import en from '../../locales/en.json';
     import ja from '../../locales/ja.json';
     import es from '../../locales/es.json';
     addMessages('en', en);
     addMessages('ja', ja);
     addMessages('es', ja);


** Vite

- @crxjs/vite-plugin
  - This is a problematic package that supports manifest.ts, HMR, compilation for developing browser
    extensions. Since the @crxjs/vite-plugin@latest is obsolete and imports a very old version of
    vite, we need to install @crxjs/vite-plugin@beta or newer, at this time ^2.0.0-beta.25.

* Caution

- Since CSS conflists with page scripts, we cannot use component libraries such as  [Svelte Material UI](https://sveltematerialui.com/).
